#!/bin/bash

# opens a git remote in the browser

usage() { echo "Usage: $0 [-r remote] [-b branch] [-p path]" 1>&2; exit 1; }

BRANCH_COLOR="\x1b[36m"
REMOTE_COLOR="\x1b[33m"
SUFFIX_COLOR="\x1b[32m"
RESET_COLOR="\x1b[0m"

PATH_SUFFIX=
REMOTE=origin
BRANCH=$(git rev-parse --abbrev-ref HEAD)

while getopts ":p:r:b:" o; do
  case "${o}" in
    p)
      [ -n "${OPTARG+1}" ] || usage
      PATH_SUFFIX=${OPTARG}
      ;;
    r)
      [ -n "${OPTARG+1}" ] || usage
      REMOTE=${OPTARG}
      ;;
    b)
      [ -n "${OPTARG+1}" ] || usage
      BRANCH=${OPTARG}
      ;;
    *)
      usage
      ;;
  esac
done

# open with MacOS or linux
open_browser() {
  if [ `uname -s` = Darwin ]; then
    open $1
  else
    google-chrome $1
  fi
}

# try to get the base URL from the git remote command
REMOTE_VERBOSE=$(git remote -v)
if [[ $REMOTE_VERBOSE =~ ${REMOTE}[[:space:]]+(https:\/\/|git@)(github|gitlab|bitbucket)\.com(\:|\/)([^[:space:]]+)(\.git)? ]]; then
  REPO_URL=https://${BASH_REMATCH[2]}.com/${BASH_REMATCH[4]%.git} # sometimes there is a '.git' after the remote, we'll chomp that if its there
else
  echo unable to parse 
  echo $REMOTE_VERBOSE
  exit 1
fi

# check if the branch they want exists
if git ls-remote --heads --exit-code "$REPO_URL" "$BRANCH" 1>/dev/null; then
  echo -e branch "$BRANCH_COLOR$BRANCH$RESET_COLOR" is in remote "$REMOTE_COLOR$REMOTE$RESET_COLOR"
else
  echo -e branch "$BRANCH_COLOR$BRANCH$RESET_COLOR" is not in remote "$REMOTE_COLOR$REMOTE$RESET_COLOR"
  echo ignoring your options and opening $REPO_URL
  open_browser $REPO_URL
  exit 0
fi

# get the subdirectory within the git repo
# normally this command gets it
PATH_PREFIX=$(git rev-parse --show-prefix)
# unless they are running this script from a git alias, then you need to look at $GIT_PREFIX
PATH_PREFIX="${PATH_PREFIX:-${GIT_PREFIX:-}}"

FULL_URL=${REPO_URL}/tree/${BRANCH}/${PATH_PREFIX}

if [ -n "${PATH_SUFFIX+1}" ]; then
  FULL_URL="$FULL_URL$PATH_SUFFIX"
fi

echo opening $FULL_URL
open_browser $FULL_URL

